---
swagger: "2.0"

info:
  title: Hyperloop API Documentation
  version: 1.0.0
  description: |
    **Contact:** [Daniel Sposito](mailto:daniel.g.sposito@gmail.com) &nbsp;|&nbsp; **GitHub:** http://github.com/dsposito/hyperloop-api

    # Manifesto

    We all have a right to freedom and the pursuit of happiness.
    Included in these rights is the ability to travel, to explore, to learn, grow and contribute all around the world.
    Yet today, we are shackled by the modern day likes of the horse-drawn carriage,
    traveling at painfully slow speeds - often through soul-destroying traffic - preventing us from truly reaching the destinations we seek.

    Imagine being able to travel hundreds of miles in minutes instead of hours.
    Each home and office building could have an underground station (similar to how we have garages today)
    where you could board a pod-like autonomous vehicle that would whisk you away directly to your destination.
    This would shrink our world.

    Hyperloop technology gives us a better path forward via a fast, weather-immune, and sustainable new form of transportation.
    **This site provides documentation for a theoretical Hyperloop API to power the future of mobility.**

paths:
  "/api/stations":
    get:
      summary: List all stations
      description: Get a list of stations.
      tags:
        - stations
      responses:
        "200":
          description: List of stations
          schema:
            type: array
            items:
              $ref: "schemas/station.yaml"
  "/api/stations/{id}":
    get:
      summary: Retrieve a station
      description: Retrieve a single station of a given ID.
      tags:
        - stations
      parameters:
        - name: id
          in: path
          description: ID of the station to get
          required: true
          type: integer
          format: int32
      responses:
        "200":
          description: A station
          schema:
            $ref: "schemas/station.yaml"
        "404":
          description: Station not found
  "/api/tubes":
    get:
      summary: List all tubes
      description: Get a list of tubes.
      tags:
        - tubes
      responses:
        "200":
          description: List of tubes
          schema:
            type: array
            items:
              $ref: "schemas/tube.yaml"
  "/api/tubes/{id}":
    get:
      summary: Retrieve a tube
      description: Retrieve a single tube of a given ID.
      tags:
        - tubes
      parameters:
        - name: id
          in: path
          description: ID of the tube to get
          required: true
          type: integer
          format: int32
      responses:
        "200":
          description: A tube
          schema:
            $ref: "schemas/tube.yaml"
        "404":
          description: Tube not found
  "/api/pods":
    get:
      summary: List all pods
      description: Get a list of pods.
      tags:
        - pods
      responses:
        "200":
          description: List of pods
          schema:
            type: array
            items:
              $ref: "schemas/pod.yaml"
  "/api/pods/{id}":
    get:
      summary: Retrieve a pod
      description: Retrieve a single pod of a given ID.
      tags:
        - pods
      parameters:
        - name: id
          in: path
          description: ID of the pod to get
          required: true
          type: integer
          format: int32
      responses:
        "200":
          description: A pod
          schema:
            $ref: "schemas/pod.yaml"
        "404":
          description: Pod not found
  "/api/loops":
    get:
      summary: List all loops
      description: Get a list of loops.
      tags:
        - loops
      responses:
        "200":
          description: List of loops
          schema:
            type: array
            items:
              $ref: "schemas/loop.yaml"
  "/api/loops/{id}":
    get:
      summary: Retrieve a loop
      description: Retrieve a single loop of a given ID.
      tags:
        - loops
      parameters:
        - name: id
          in: path
          description: ID of the loop to get
          required: true
          type: integer
          format: int32
      responses:
        "200":
          description: A loop
          schema:
            $ref: "schemas/loop.yaml"
        "404":
          description: Loop not found

tags:
- name: stations
  description: |
    Stations serve as arrival and departure points for pods.
    Stations are named based on the following pattern:

    `{REGION}-{TYPE}{LATITUDE}{LONGITUDE}`

    **Example:** HAW-PUB33118 (Hawthorne - California, Public, Geo-coordinates: 33.920659, -118.328278)

    * **Region:** The city in which the station is located.
    * **Type:** The station's accessibility - public or private.
    * **Latitude:** The degree of latitude at which the station is located.
    * **Longitude:** The degree of longitude at which the station is located.
- name: tubes
  description: |
    Tubes transport pods from station to station.
    Tubes are named based on the following pattern:

    `{REGION}-{DIRECTION}{TYPE}{ELEVATION}`

    **Example:** CA-NT1 (California, North, Tunnel, 1)

    * **Region:** The general region in which the tube is located.
    * **Direction:** The primary direction in which pods travel through the tube.
    * **Type:** The tube's structural type - underground tunnel or elevated above ground.
    * **Elevation:** The absolute elevation of the tube (similar to floors in a building).
- name: pods
  description: |
    Pods transport passengers, cargo, and vehicles through a Hyperloop tube from one station to another.
    Pods are named based on the following pattern:

    `{TYPE}{ALPHA_ID}-{NUMERIC_ID}`

    **Example:** PA-1440 (Passenger, A, 1440)

    * **Type:** The pod's type describes what it transports: passengers, cargo, or vehicles.
    * **Alpha ID:** A short, alphabetic ID.
    * **Numeric ID:** A short, numeric ID.
- name: loops
  description: |
    Loops are the associations of stations and pods.
    A loop is the trip a pod takes through tubes from one origin station to a final destination station.
    Loop names are not guaranteed to be unique and are based on the following pattern:

    `{DISTINATION_STATION.REGION}-{POD_ID}`

    **Example:** HAW-4597 (Hawthorne - California, 4597)

    * **Destination Station - Region:** The city in which the destination station is located.
    * **Pod ID:** The ID of the pod.

x-tagGroups:
  - name: API
    tags:
      - stations
      - tubes
      - pods
      - loops

definitions: {}
parameters: {}
